/**
 * dp-client
 * 
 *
 * OpenAPI spec version: 1.0.2
 * Contact: towyuan@outlook.com
 *
 * NOTE: This library is auto generated by the Open API Codegen program.
 * https://github.com/taoyuan/generator-oac.git
 * Do not edit the class manually.
 *
 */

const utils = require('./_utils');

/*jshint -W069 */
/**
 * @class Task
 * @alias module:api/Task
 * @param {Requestor} [requestor] - The project domain or options object. If object, see the object's optional properties.
 */
class Task {
  constructor(requestor) {
    this.requestor = requestor;
  }
  /**
   * Find a related item by id for taskStatus.
   *
   * @method
   * @path [GET] /Tasks/{id}/taskStatus/{fk}
   * @name Task#findTaskStatusById
   * @param {string} id - Task id
   * @param {string} fk - Foreign key for taskStatus
   * @param {function} [cb] - Callback function
   */
  findTaskStatusById(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling findTaskStatusById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling findTaskStatusById");
    }

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Tasks/{id}/taskStatus/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Delete a related item by id for taskStatus.
   *
   * @method
   * @path [DELETE] /Tasks/{id}/taskStatus/{fk}
   * @name Task#destroyTaskStatusById
   * @param {string} id - Task id
   * @param {string} fk - Foreign key for taskStatus
   * @param {function} [cb] - Callback function
   */
  destroyTaskStatusById(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling destroyTaskStatusById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling destroyTaskStatusById");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Tasks/{id}/taskStatus/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Update a related item by id for taskStatus.
   *
   * @method
   * @path [PUT] /Tasks/{id}/taskStatus/{fk}
   * @name Task#updateTaskStatusById
   * @param {string} id - Task id
   * @param {string} fk - Foreign key for taskStatus
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - data
   * @param {function} [cb] - Callback function
   */
  updateTaskStatusById(id, fk, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling updateTaskStatusById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling updateTaskStatusById");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/Tasks/{id}/taskStatus/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Queries taskStatus of Task.
   *
   * @method
   * @path [GET] /Tasks/{id}/taskStatus
   * @name Task#getTaskStatus
   * @param {string} id - Task id
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - filter
   * @param {function} [cb] - Callback function
   */
  getTaskStatus(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getTaskStatus");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
    };

    const path = utils.buildPath('/Tasks/{id}/taskStatus', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Creates a new instance in taskStatus of this model.
   *
   * @method
   * @path [POST] /Tasks/{id}/taskStatus
   * @name Task#createTaskStatus
   * @param {string} id - Task id
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - data
   * @param {function} [cb] - Callback function
   */
  createTaskStatus(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling createTaskStatus");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/Tasks/{id}/taskStatus', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Deletes all taskStatus of this model.
   *
   * @method
   * @path [DELETE] /Tasks/{id}/taskStatus
   * @name Task#deleteTaskStatus
   * @param {string} id - Task id
   * @param {function} [cb] - Callback function
   */
  deleteTaskStatus(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling deleteTaskStatus");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Tasks/{id}/taskStatus', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Counts taskStatus of Task.
   *
   * @method
   * @path [GET] /Tasks/{id}/taskStatus/count
   * @name Task#countTaskStatus
   * @param {string} id - Task id
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.where] - Criteria to match model instances
   * @param {function} [cb] - Callback function
   */
  countTaskStatus(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling countTaskStatus");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      where: opts['where'],
    };

    const path = utils.buildPath('/Tasks/{id}/taskStatus/count', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Create a new instance of the model and persist it into the data source.
   *
   * @method
   * @path [POST] /Tasks
   * @name Task#create
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  create(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = '/Tasks';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Patch an existing model instance or insert a new one into the data source.
   *
   * @method
   * @path [PATCH] /Tasks
   * @name Task#patchOrCreate
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  patchOrCreate(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PATCH',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = '/Tasks';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Replace an existing model instance or insert a new one into the data source.
   *
   * @method
   * @path [PUT] /Tasks
   * @name Task#replaceOrCreate
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  replaceOrCreate(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = '/Tasks';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Find all instances of the model matched by filter from the data source.
   *
   * @method
   * @path [GET] /Tasks
   * @name Task#find
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
   * @param {function} [cb] - Callback function
   */
  find(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
    };

    const path = '/Tasks';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Replace an existing model instance or insert a new one into the data source.
   *
   * @method
   * @path [POST] /Tasks/replaceOrCreate
   * @name Task#replaceOrCreateViaPost
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  replaceOrCreateViaPost(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = '/Tasks/replaceOrCreate';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Update an existing model instance or insert a new one into the data source based on the where criteria.
   *
   * @method
   * @path [POST] /Tasks/upsertWithWhere
   * @name Task#upsertWithWhere
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.where] - Criteria to match model instances
   * @param {object} [opts.data] - An object of model property name/value pairs
   * @param {function} [cb] - Callback function
   */
  upsertWithWhere(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      where: opts['where'],
    };
    req.data = opts['data'];

    const path = '/Tasks/upsertWithWhere';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Check whether a model instance exists in the data source.
   *
   * @method
   * @path [GET] /Tasks/{id}/exists
   * @name Task#exists
   * @param {string} id - Model id
   * @param {function} [cb] - Callback function
   */
  exists(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling exists");
    }

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Tasks/{id}/exists', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Check whether a model instance exists in the data source.
   *
   * @method
   * @path [HEAD] /Tasks/{id}
   * @name Task#existsViaHead
   * @param {string} id - Model id
   * @param {function} [cb] - Callback function
   */
  existsViaHead(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling existsViaHead");
    }

    const req = {
      method: 'HEAD',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Tasks/{id}', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Find a model instance by {{id}} from the data source.
   *
   * @method
   * @path [GET] /Tasks/{id}
   * @name Task#findById
   * @param {string} id - Model id
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
   * @param {function} [cb] - Callback function
   */
  findById(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling findById");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
    };

    const path = utils.buildPath('/Tasks/{id}', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Replace attributes for a model instance and persist it into the data source.
   *
   * @method
   * @path [PUT] /Tasks/{id}
   * @name Task#replaceById
   * @param {string} id - Model id
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  replaceById(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling replaceById");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/Tasks/{id}', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Delete a model instance by {{id}} from the data source.
   *
   * @method
   * @path [DELETE] /Tasks/{id}
   * @name Task#deleteById
   * @param {string} id - Model id
   * @param {function} [cb] - Callback function
   */
  deleteById(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling deleteById");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Tasks/{id}', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Patch attributes for a model instance and persist it into the data source.
   *
   * @method
   * @path [PATCH] /Tasks/{id}
   * @name Task#patchAttributes
   * @param {string} id - Task id
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - An object of model property name/value pairs
   * @param {function} [cb] - Callback function
   */
  patchAttributes(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling patchAttributes");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PATCH',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/Tasks/{id}', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Replace attributes for a model instance and persist it into the data source.
   *
   * @method
   * @path [POST] /Tasks/{id}/replace
   * @name Task#replaceByIdViaPost
   * @param {string} id - Model id
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  replaceByIdViaPost(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling replaceByIdViaPost");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/Tasks/{id}/replace', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Find first instance of the model matched by filter from the data source.
   *
   * @method
   * @path [GET] /Tasks/findOne
   * @name Task#findOne
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
   * @param {function} [cb] - Callback function
   */
  findOne(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
    };

    const path = '/Tasks/findOne';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Update instances of the model matched by {{where}} from the data source.
   *
   * @method
   * @path [POST] /Tasks/update
   * @name Task#updateAll
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.where] - Criteria to match model instances
   * @param {object} [opts.data] - An object of model property name/value pairs
   * @param {function} [cb] - Callback function
   */
  updateAll(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      where: opts['where'],
    };
    req.data = opts['data'];

    const path = '/Tasks/update';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Count instances of the model matched by where from the data source.
   *
   * @method
   * @path [GET] /Tasks/count
   * @name Task#count
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.where] - Criteria to match model instances
   * @param {function} [cb] - Callback function
   */
  count(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      where: opts['where'],
    };

    const path = '/Tasks/count';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Create a change stream.
   *
   * @method
   * @path [POST] /Tasks/change-stream
   * @name Task#createChangeStreamViaPost
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.options] - options
   * @param {function} [cb] - Callback function
   */
  createChangeStreamViaPost(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.form = {
      options: opts['options'],
    };

    const path = '/Tasks/change-stream';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Create a change stream.
   *
   * @method
   * @path [GET] /Tasks/change-stream
   * @name Task#createChangeStream
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.options] - options
   * @param {function} [cb] - Callback function
   */
  createChangeStream(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      options: opts['options'],
    };

    const path = '/Tasks/change-stream';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 创建任务
   *
   * @method
   * @path [POST] /Tasks/status
   * @name Task#taskStatus
   * @param {string} data - 
   * @param {function} [cb] - Callback function
   */
  taskStatus(data, cb) {
    // verify the required parameter 'data' is set
    if (data === undefined || data === null) {
      throw new Error("Missing the required parameter 'data' when calling taskStatus");
    }

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.form = {
      data: data,
    };

    const path = '/Tasks/status';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 创建任务
   *
   * @method
   * @path [POST] /Tasks/createTask
   * @name Task#createTask
   * @param {string} data - 
   * @param {function} [cb] - Callback function
   */
  createTask(data, cb) {
    // verify the required parameter 'data' is set
    if (data === undefined || data === null) {
      throw new Error("Missing the required parameter 'data' when calling createTask");
    }

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.form = {
      data: data,
    };

    const path = '/Tasks/createTask';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 任务回调
   *
   * @method
   * @path [POST] /Tasks/callback/{tenant}
   * @name Task#callback
   * @param {string} tenant - 
   * @param {function} [cb] - Callback function
   */
  callback(tenant, cb) {
    // verify the required parameter 'tenant' is set
    if (tenant === undefined || tenant === null) {
      throw new Error("Missing the required parameter 'tenant' when calling callback");
    }

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Tasks/callback/{tenant}', {
      tenant: tenant,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 取消任务
   *
   * @method
   * @path [PUT] /Tasks/{id}/cancel
   * @name Task#cancelPrint
   * @param {string} id - Task id
   * @param {function} [cb] - Callback function
   */
  cancelPrint(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling cancelPrint");
    }

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Tasks/{id}/cancel', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 任务回调
   *
   * @method
   * @path [POST] /Tasks/transformCallback
   * @name Task#transformCallback
   * @param {string} secret - 
   * @param {function} [cb] - Callback function
   */
  transformCallback(secret, cb) {
    // verify the required parameter 'secret' is set
    if (secret === undefined || secret === null) {
      throw new Error("Missing the required parameter 'secret' when calling transformCallback");
    }

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.form = {
      secret: secret,
    };

    const path = '/Tasks/transformCallback';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
}

module.exports = Task;