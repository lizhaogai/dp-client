/**
 * dp-client
 * 
 *
 * OpenAPI spec version: 1.0.2
 * Contact: towyuan@outlook.com
 *
 * NOTE: This library is auto generated by the Open API Codegen program.
 * https://github.com/taoyuan/generator-oac.git
 * Do not edit the class manually.
 *
 */

const utils = require('./_utils');

/*jshint -W069 */
/**
 * @class Dolink
 * @alias module:api/Dolink
 * @param {Requestor} [requestor] - The project domain or options object. If object, see the object's optional properties.
 */
class Dolink {
  constructor(requestor) {
    this.requestor = requestor;
  }
  /**
   * 创建任务
   *
   * @method
   * @path [POST] /Dolinks/apps/users/login
   * @name Dolink#appUserLogin
   * @param {string} data - 
   * @param {function} [cb] - Callback function
   */
  appUserLogin(data, cb) {
    // verify the required parameter 'data' is set
    if (data === undefined || data === null) {
      throw new Error("Missing the required parameter 'data' when calling appUserLogin");
    }

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.form = {
      data: data,
    };

    const path = '/Dolinks/apps/users/login';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 创建任务
   *
   * @method
   * @path [POST] /Dolinks/apps/users
   * @name Dolink#createAppUser
   * @param {string} data - 
   * @param {function} [cb] - Callback function
   */
  createAppUser(data, cb) {
    // verify the required parameter 'data' is set
    if (data === undefined || data === null) {
      throw new Error("Missing the required parameter 'data' when calling createAppUser");
    }

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.form = {
      data: data,
    };

    const path = '/Dolinks/apps/users';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 创建任务
   *
   * @method
   * @path [POST] /Dolinks/apps/nodes
   * @name Dolink#appUserPairNode
   * @param {string} nodeId - 
   * @param {function} [cb] - Callback function
   */
  appUserPairNode(nodeId, cb) {
    // verify the required parameter 'nodeId' is set
    if (nodeId === undefined || nodeId === null) {
      throw new Error("Missing the required parameter 'nodeId' when calling appUserPairNode");
    }

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.form = {
      nodeId: nodeId,
    };

    const path = '/Dolinks/apps/nodes';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 获取设备列表
   *
   * @method
   * @path [GET] /Dolinks/devices
   * @name Dolink#getDevices
   * @param {function} [cb] - Callback function
   */
  getDevices(cb) {

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = '/Dolinks/devices';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 设置回调
   *
   * @method
   * @path [POST] /Dolinks/callback
   * @name Dolink#setCallback
   * @param {function} [cb] - Callback function
   */
  setCallback(cb) {

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = '/Dolinks/callback';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
}

module.exports = Dolink;